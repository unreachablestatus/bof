generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  username         String        @unique
  password         String
  isAdmin          Boolean       @default(false) @map("is_admin")
  createdAt        DateTime      @default(now()) @map("created_at")
  notes            Note[]
  poems            Poem[]
  sentMessages     ChatMessage[] @relation("SentMessages")
  receivedMessages ChatMessage[] @relation("ReceivedMessages")

  @@map("users")
}

model Card {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("cards")
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Poem {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("poems")
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  content    String
  senderId   Int      @map("sender")
  receiverId Int      @map("receiver")
  timestamp  DateTime @default(now())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}
